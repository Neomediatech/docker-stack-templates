{
  "version": "2",
	"templates": [
		{
			"type": 2,
			"name": "email",
			"title": "Email by Neomediatech",
			"description": "email stack",
			"note": " ",
			"categories": [
				"email"
			],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/Neomediatech/docker-stack-templates/master/email.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "email-stack.yml"
			},
			"env": [{
				 "name": "MAILSERVER_CERT",
				 "label": "MAILSERVER_CERT",
				 "description": "FQDN del mailserver da utilizzare per il percorso del certificato (il certificato deve già esistere!)",
			         "default": "mail.entep**.it"
				},
				{
				 "name": "EXIM_LOGDIR",
				 "label": "EXIM_LOGDIR",
				 "description": "Path dei log di Exim (cambia solo se sai cosa stai facendo!)",
			         "default": "/data/logs"
				},
				{
				 "name": "STACK_BASE_PATH",
				 "label": "STACK_BASE_PATH",
				 "description": "Percorso base dello stack all'interno dell'host (deve esistere!)",
			         "default": "/srv/data/email"
				}
			]
		},
		{
			"type": 2,
			"name": "pusher",
			"title": "Pusher by Neomediatech",
			"description": "pusher stack",
			"note": " ",
			"categories": [
				"web"
			],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/Neomediatech/docker-stack-templates/master/nginx-logo-nm.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "redirector-stack-4-swarm.yml"
			}
		},
		{
			"type": 2,
			"name": "website",
			"title": "Website by Neomediatech",
			"description": "website stack",
			"note": " ",
			"categories": [
				"web"
			],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/Neomediatech/docker-stack-templates/master/epevda-logo.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "website-stack-4-swarm-debian-custom-fpm.yml"
			}
		},
		{
			"type": 2,
			"name": "portainer",
			"title": "Portainer by Neomediatech",
			"description": "Portainer swarm stack",
			"note": " ",
			"categories": [
				"management"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/portainer-docker-stack/raw/master/portainer_logo.png",
			"repository": {
				"url": "https://github.com/Neomediatech/portainer-docker-stack",
				"stackfile": "docker-compose.yml"
			}
		},
		{
			"type": 2,
			"name": "nextcloud",
			"title": "Nextcloud by Neomediatech",
			"description": "Nextcloud, OnlyOffice, Nginx, MariaDB, FPM, Redis, cron",
			"note": "<h1>ATTENZIONE!!!</h1> Vanno create le secrets 'nc-db-file.txt', 'nc-db-pwd.txt', 'nc-db-root-pwd.txt', 'nc-db-user.txt' (se non esistono) dentro swarm. Si può fare in Portainer -> Secrets. Sono le stesse secrets presenti in /srv/data/databases/nextcloud/",
			"categories": [
				"web", "storage"
			],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/Neomediatech/docker-stack-templates/master/nextcloud-logo-nm.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "portainer-v2/nextcloud-stack-4-swarm-epe.yml"
			}
		},
		{
			"type": 2,
			"name": "catchall",
			"title": "Nginx container to catch all 'unused' web traffic",
			"description": "_",
			"note": "<h1>IMPORTANT:</h1>You must create the path where you host configurations, eg: <strong>mkdir -p /srv/data/docker/containers/traefik</strong> <br/>",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/docker-stack-templates/raw/master/portainer-v2/nginx-catchall-traefik.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "portainer-v2/nginx-catchall.yml"
			},
			"env": [{
				 "name": "FQDN_HOST",
				 "label": "FQDN_HOST",
				 "description": "Full hostname",
			         "default": "catchall.c.***"
				},
				{
				 "name": "STACK_BASE_PATH",
				 "label": "STACK_BASE_PATH",
				 "description": "Path for the stack. Must exists before launching this stack!",
			         "default": "/srv/data/docker/containers/traefik"
				}
			]
		},
		{
			"type": 2,
			"name": "pma-ispc",
			"title": "phpMyAdmin per db ISPConfig",
			"description": "Container pma per db ispconfig",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/docker-stack-templates/raw/master/portainer-v2/pma-ispc.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "portainer-v2/pma-4-swarm-traefik.yml"
			},
			"env": [{
				 "name": "DB_HOST",
				 "label": "DB_HOST",
				 "description": "Mysql/MariaDB server",
			         "default": "10.2.0.1"
				},
				{
				 "name": "FQDN_HOST",
				 "label": "FQDN_HOST",
				 "description": "hostname da utilizzare per raggiungere il servizio",
			         "default": "pma-ispc.c..."
				},
				{
				 "name": "UPLOAD_LIMIT",
				 "label": "UPLOAD_LIMIT",
				 "description": "limite di upload del file sql",
			         "default": "20M"
				}
			]
		},
		{
			"type": 2,
			"name": "pyzor",
			"title": "Pyzor server by neomediatech",
			"description": "Stack composto da un'istanza Pyzor e Redis",
			"note": "<h1>IMPORTANT:</h1>You must create the path where you host configurations, eg: <strong>mkdir -p /srv/data/docker/containers/pyzor-server</strong> <br/>",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/docker-stack-templates/raw/master/nm-logo.png",
			"repository": {
				"url": "https://github.com/Neomediatech/pyzor-server",
				"stackfile": "docker-compose.yml"
			},
			"env": [{
				 "name": "STACK_BASE_PATH",
				 "label": "STACK_BASE_PATH",
				 "description": "Path for the stack. Must exists before launching this stack!",
			         "default": "/srv/data/docker/containers/pyzor-server"
				}
			]
		},
		{
			"type": 2,
			"name": "failover",
			"title": "Failover Stack",
			"description": "API (& more maybe) to manage failover to servers Database utilizzato dai vari server per recuperare i cron (e magari altro in futuro)",
			"note": "<h1>IMPORTANTE:</h1> Devi prima creare il percorso dove verranno ospitati i file, es: <strong>mkdir -p /srv/data/docker/containers/failover</strong> <br/>",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/docker-stack-templates/raw/master/portainer-v2/failover.png",
			"repository": {
				"url": "https://github.com/Neomediatech/docker-stack-templates",
				"stackfile": "portainer-v2/failover-stack-4-swarm.yml"
			},
			"env": [{
				 "name": "FQDN_PMA",
				 "label": "FQDN_PMA",
				 "description": "FQDN to access phpmyadmin interface (used by traefik to redirect traffic & for let'encrypt ssl certificate",
			         "default": "failover-pma.c.g.."
				},
				{
				 "name": "FQDN_NGINX",
				 "label": "FQDN_NGINX",
				 "description": "FQDN to access our api interface (used by traefik to redirect traffic & for let'encrypt ssl certificate",
			         "default": "failover-api.c.g.."
				},
				{
				 "name": "TRAEFIK_WHITELIST",
				 "label": "TRAEFIK_WHITELIST",
				 "description": "(optional) elenco di classi/ip autorizzate ad attraversare traefik, separati da virgola",
			         "default": "127.0.0.1"
				},
				{
				 "name": "STACK_BASE_PATH",
				 "label": "STACK_BASE_PATH",
				 "description": "Path for the stack. Must exists before launching this stack!",
			         "default": "/srv/data/docker/containers/failover"
				}
			]
		},
		{
			"type": 1,
			"name": "fail2ban",
			"title": "Fail2Ban by Neomediatech",
			"description": "Dockerized Fail2Ban",
			"note": "<h1>crea le varie directory: </h1>BASE_DIR='/srv/data/docker/containers/fail2ban' <br>mkdir -p $BASE_DIR/{action.d,db,filter.d,jail.d,log} && chmod 777 $BASE_DIR/{action.d,db,filter.d,jail.d,log}",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/Neomediatech/fail2ban/master/fail2ban_logo.png",
			"image": "neomediatech/fail2ban:from-source",
			"hostname": "fail2ban",
			"network": "host",
			"volumes": [
			  {
			    "container": "/data",
			    "bind": "/srv/data/docker/containers/fail2ban/confs"
			  },
			  {
			    "container": "/var/log",
			    "bind": "/srv/data/docker/containers/fail2ban/logs"
			  },
			  {
			    "container": "/var/log/dnsbl-ipset",
			    "bind": "/var/log/dnsbl-ipset",
			    "readonly": true
			  },
			  {
			    "container": "/var/log/nginx-catchall",
			    "bind": "/srv/data/docker/containers/traefik/logs",
			    "readonly": true
			  }
			],
			"restart_policy": "always",
			"privileged": true,
			"env": [{
				 "name": "F2B_DEST_EMAIL",
				 "label": "F2B_DEST_EMAIL",
				 "description": "_",
			         "default": "supp..@ne.."
				},
				{
				 "name": "F2B_SENDER",
				 "label": "F2B_SENDER",
				 "description": "_",
			         "default": "hostname@ne.."
				},
				{
				 "name": "SSMTP_HOST",
				 "label": "SSMTP_HOST",
				 "description": "SMTP tu use to send notifications",
				 "default": "10.40.50.5"
				},
				{
				 "name": "SSMTP_HOSTNAME",
				 "label": "SSMTP_HOSTNAME",
				 "description": "_",
			         "default": "hostname.ne.."
				}
			]
		},
		{
			"type": 1,
			"name": "redis-service",
			"title": "Redis",
			"description": "Redis di servizio senza scrittura dati su disco",
			"note": "_",
			"categories": [
				"Other"
			],
			"platform": "linux",
			"logo": "https://github.com/Neomediatech/docker-stack-templates/raw/master/portainer-v2/redis-logo.png",
			"image": "redis:alpine",
			"hostname": "redis-service",
			"network": "bridge",
			"ports": ["6400:6379/tcp"],
			"volumes": [
			  {
			    "container": "/data",
			    "bind": "/srv/data/docker/containers/redis-service/data"
			  }
			],
			"restart_policy": "always"
		}
  ]
} 
